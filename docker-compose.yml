services:
  rabbitmq:
    image: rabbitmq:4.1-management
    hostname: rabbitmq
    ports:
      - "5672:5672"    # AMQP
      - "15672:15672"  # management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 5

  consumer:
    image: chronos
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
    command: ["uv", "run", "src/consumer.py"]

    environment:
      PG_DSN:      postgres://postgres:example@postgres:5432/postgres
      RABBIT_URL:  amqp://guest:guest@rabbitmq:5672/
    restart: unless-stopped

  producer:
    image: chronos
    depends_on:
      rabbitmq: { condition: service_healthy }
      postgres: { condition: service_healthy }
    command: ["uv", "run", "src/producer.py"]
    environment:
      PG_DSN:      postgres://postgres:example@postgres:5432/postgres
      RABBIT_URL:  amqp://guest:guest@rabbitmq:5672/
      LOCK_BATCH:  "500"
      TICK_MS:     "500"
    # deploy:                        # compose v3 “swarm-mode” style replicas
      # replicas: 3                  # spin up 3 identical workers
    restart: unless-stopped

  # ───── Observability stack ───────────────────────────────────
  # prometheus:
  #   image: prom/prometheus:v2.53
  #   ports: ["9090:9090"]
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #
  # grafana:
  #   image: grafana/grafana:10.4.2
  #   depends_on:
  #     - prometheus
  #   ports: ["3000:3000"]
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #     GF_INSTALL_PLUGINS: grafana-piechart-panel

volumes:
  rabbitmq-data:
  pg-data:
